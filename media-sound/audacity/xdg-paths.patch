diff --git a/src/AboutDialog.cpp b/src/AboutDialog.cpp
index 9d2ffb0..365daa7 100644
--- a/src/AboutDialog.cpp
+++ b/src/AboutDialog.cpp
@@ -797,9 +797,12 @@ void AboutDialog::PopulateInformationPage( ShuttleGui & S )
 #endif
 
    // Location of settings
-   AddBuildinfoRow(&informationStr, XO("Settings folder:"), \
-      FileNames::DataDir());
-   // end of table
+   AddBuildinfoRow(&informationStr, XO("Config folder:"), \
+           FileNames::ConfigDir());
+   // Location of data
+   AddBuildinfoRow(&informationStr, XO("Data folder:"), \
+           FileNames::DataDir());
+
    informationStr << wxT("</table>\n");
 
    html->SetPage( FormatHtmlText( o.GetString() ) );   // push the page into the html renderer
diff --git a/src/AudacityApp.cpp b/src/AudacityApp.cpp
index 661ab7e..c3b5fc2 100644
--- a/src/AudacityApp.cpp
+++ b/src/AudacityApp.cpp
@@ -1138,6 +1138,9 @@ bool AudacityApp::OnInit()
    // AddHandler takes ownership
    wxFileSystem::AddHandler(safenew wxZipFSHandler);
 
+   // encouraged by wxwidgets
+   wxStandardPaths::Get().SetFileLayout(wxStandardPaths::FileLayout::FileLayout_XDG);
+
    //
    // Paths: set search path and temp dir path
    //
@@ -1372,7 +1375,7 @@ bool AudacityApp::OnInit()
 
    AudacityProject *project;
    {
-      // Bug 718: Position splash screen on same screen 
+      // Bug 718: Position splash screen on same screen
       // as where Audacity project will appear.
       wxRect wndRect;
       bool bMaximized = false;
@@ -1389,11 +1392,11 @@ bool AudacityApp::OnInit()
          wxDefaultSize,
          wxSTAY_ON_TOP);
 
-      // Unfortunately with the Windows 10 Creators update, the splash screen 
+      // Unfortunately with the Windows 10 Creators update, the splash screen
       // now appears before setting its position.
-      // On a dual monitor screen it will appear on one screen and then 
+      // On a dual monitor screen it will appear on one screen and then
       // possibly jump to the second.
-      // We could fix this by writing our own splash screen and using Hide() 
+      // We could fix this by writing our own splash screen and using Hide()
       // until the splash scren was correctly positioned, then Show()
 
       // Possibly move it on to the second screen...
diff --git a/src/FileNames.cpp b/src/FileNames.cpp
index a0eb2ef..8f3237f 100644
--- a/src/FileNames.cpp
+++ b/src/FileNames.cpp
@@ -47,6 +47,11 @@ used throughout Audacity into this one place.
 #include <windows.h>
 #endif
 
+#if defined(__WXGTK__)
+static wxString gOldUnixDataDir;
+#endif
+
+static wxString gConfigDir
 static wxString gDataDir;
 
 const FileNames::FileType
@@ -176,7 +181,7 @@ bool FileNames::HardLinkFile( const FilePath& file1, const FilePath& file2 )
 #ifdef __WXMSW__
 
    // Fix forced ASCII conversions and wrong argument order - MJB - 29/01/2019
-   //return ::CreateHardLinkA( file1.c_str(), file2.c_str(), NULL );  
+   //return ::CreateHardLinkA( file1.c_str(), file2.c_str(), NULL );
    return ( 0 != ::CreateHardLink( file2, file1, NULL ) );
 
 #else
@@ -245,8 +250,49 @@ wxString FileNames::LowerCaseAppNameInPath( const wxString & dirIn){
    return dir;
 }
 
+FilePath FileNames::ConfigDir()
+{
+#if defined(__WXGTK__)
+    if (gOldUnixDataDir.empty())
+        gOldUnixDataDir = wxFileName::GetHomeDir() + wxT("/.audacity-data");
+#endif
+
+    if (gConfigDir.empty())
+    {
+        wxFileName exePath(PlatformCompatibility::GetExecutablePath());
+#if defined(__WXMAC__)
+        // Path ends for examplle in "Audacity.app/Contents/MacOSX"
+        // just remove the MacOSX part.
+        exePath.RemoveLastDir();
+#endif
+        wxFileName portablePrefsPath(exePath.GetPath(), wxT("Portable Settings"));
+        if (::wxDirExists(portablePrefsPath.GetFullPath()))
+        {
+            // Use "Portable Settings" folder
+            gConfigDir = portablePrefsPath.GetFullPath();
+#if defined(__WXGTK__)
+        } else if (::wxDirExists(gOldUnixDataDir))
+        {
+            // Use old user data dir folder
+            gConfigDir = gOldUnixDataDir;
+#endif
+        } else {
+            // Use OS-provided user data dir folder
+            wxString configDir(wxStandardPaths::Get().GetUserConfigDir() + wxT("/audacity"));
+            gConfigDir = FileNames::MkDir(configDir);
+        }
+    }
+
+    return gConfigDir;
+}
+
+
 FilePath FileNames::DataDir()
 {
+#if defined (__WXGTK__)
+    if (gOldUnixDataDir.empty())
+        gOldUnixDataDir = wxFileName::GetHomeDir() + wxT("/.audacity-data");
+#endif
    // LLL:  Wouldn't you know that as of WX 2.6.2, there is a conflict
    //       between wxStandardPaths and wxConfig under Linux.  The latter
    //       creates a normal file as "$HOME/.audacity", while the former
@@ -270,12 +316,24 @@ FilePath FileNames::DataDir()
       {
          // Use "Portable Settings" folder
          gDataDir = portablePrefsPath.GetFullPath();
+#if defined(__WXGTK__)
+      } else if (::wxDirExists(gOldUnixDataDir))
+      {
+          // Use old user data dir folder
+          gDataDir = gOldUnixDataDir;
+      } else {
+          wxString dataDir;
+          // see if XDG_DATA_HOME is defined. If it is, use its value. If it
+          // isn't, use the default XDG-specified value
+          if ( !wxGetEnv(wxS("XDG_DATA_HOME"), &dataDir) || dataDir.empty() )
+              dataDir = wxFileName::GetHomeDir() + wxT("/.local/share");
+
+          dataDir = dataDir + wxT("/audacity");
+#else
       } else
       {
          // Use OS-provided user data dir folder
          wxString dataDir( LowerCaseAppNameInPath( wxStandardPaths::Get().GetUserDataDir() ));
-#if defined( __WXGTK__ )
-         dataDir = dataDir + wxT("-data");
 #endif
          gDataDir = FileNames::MkDir(dataDir);
       }
@@ -336,12 +394,12 @@ FilePath FileNames::PlugInDir()
 
 FilePath FileNames::PluginRegistry()
 {
-   return wxFileName( DataDir(), wxT("pluginregistry.cfg") ).GetFullPath();
+   return wxFileName( ConfigDir(), wxT("pluginregistry.cfg") ).GetFullPath();
 }
 
 FilePath FileNames::PluginSettings()
 {
-   return wxFileName( DataDir(), wxT("pluginsettings.cfg") ).GetFullPath();
+   return wxFileName( ConfigDir(), wxT("pluginsettings.cfg") ).GetFullPath();
 }
 
 FilePath FileNames::BaseDir()
@@ -491,7 +549,7 @@ wxFileNameWrapper FileNames::DefaultToDocumentsFolder(const wxString &preference
 
    // MJB: Bug 1899 & Bug 2007.  Only create directory if the result is the default path
    bool bIsDefaultPath = result == defaultPath;
-   if( !bIsDefaultPath ) 
+   if( !bIsDefaultPath )
    {
       // IF the prefs directory doesn't exist - (Deleted by our user perhaps?)
       //    or exists as a file
diff --git a/src/FileNames.h b/src/FileNames.h
index a2183c8..6d30bdb 100644
--- a/src/FileNames.h
+++ b/src/FileNames.h
@@ -47,7 +47,7 @@ namespace FileNames
       , DynamicLibraries // depends on the operating system
       , TextFiles // *.txt
       , XMLFiles; // *.xml, *.XML
-   
+
    using FileTypes = std::vector< FileType >;
 
    // Convert fileTypes into a single string as expected by wxWidgets file
@@ -88,10 +88,15 @@ namespace FileNames
       FilePaths &otherNames, wxFileName &newName);
 
    wxString LowerCaseAppNameInPath( const wxString & dirIn);
+   /** \brief Audacity user config directory
+    *
+    * Where audacity keeps its settigns squirreled away, by default ~/.config/audacity/
+    * on Unix, Application Data/Audacity on Windows */
+   FilePath ConfigDir();
    /** \brief Audacity user data directory
     *
     * Where audacity keeps its settings and other user data squirreled away,
-    * by default ~/.audacity-data/ on Unix, Application Data/Audacity on
+    * by default ~/.local/share/audacity/ on Unix, Application Data/Audacity on
     * windows system */
    FilePath DataDir();
    FilePath ResourcesDir();
